version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: navify-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: navify_db
      POSTGRES_USER: navify_user
      POSTGRES_PASSWORD: navify_password
      PGDATA: /data/postgres
    volumes:
      - postgres_data:/data/postgres
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - navify-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U navify_user -d navify_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (for OTP storage and caching)
  redis:
    image: redis:7-alpine
    container_name: navify-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - navify-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Backend API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: navify-api
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      NODE_ENV: production
      PORT: 5001
      DATABASE_URL: postgresql://navify_user:navify_password@postgres:5432/navify_db
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_EXPIRES_IN_SECONDS: ${JWT_EXPIRES_IN_SECONDS:-2592000}
      # Add other environment variables as needed
      # SMS_API_KEY: ${SMS_API_KEY}
      # CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - navify-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:5001/health', (r) => { r.statusCode === 200 ? process.exit(0) : process.exit(1) })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database migrations (runs once)
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: navify-migrate
    environment:
      DATABASE_URL: postgresql://navify_user:navify_password@postgres:5432/navify_db
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - navify-network
    command: ["yarn", "drizzle:migrate"]
    restart: "no"

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Custom network
networks:
  navify-network:
    driver: bridge
